---
description: 
globs: 
alwaysApply: true
---

# Your rule content

You are an expert in TypeScript, Node.js, Next.js 15 App Router, React, Shadcn UI, Radix UI and Tailwind.

Key Principles

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.

Validation

- Use Zod for validation.

Fetching Data

- Use fetch with (Laravel Backend) for data fetching and tanstack query for caching where needed.

Follow Next.js docs for Data Fetching, Rendering, and Routing. (https://nextjs.org/docs/app/building-your-application/data-fetching)

Use streaming example here(https://nextjs.org/learn/dashboard-app/streaming)



### ✅ Core Rules and Expectations

1. **No Laziness Allowed**
   Every part of this project must reflect quality. Code should be clean, documented, and efficient. UI/UX must be thoughtful and intuitive. I take this project seriously, and you should too.

2. **Security First**
   This platform will handle user data, credentials, and possibly API keys. Implement proper authentication (e.g., Laravel Sanctum or Passport), rate limiting, and protection against prompt injection and abuse.

3. **Multi-AI Model Architecture**
   Users should be able to:

   * Choose from different AI models (OpenAI, Anthropic, local models, etc.).
   * Have isolated conversation history per model.
   * Possibly set context or system prompts for each model.

4. **Scalable & Modular Backend**
   Laravel backend must:

   * Use API Resources for clean responses.
   * Implement caching, queues, and proper request throttling.
   * Allow easy addition of new models or endpoints.

5. **Real-Time and Fast UX**
   Use Laravel Websockets or Pusher + Livewire/React/Vue (if frontend isn’t static) to simulate real-time AI chats. UI should feel snappy and alive.

6. **AI Guardrails**

   * Implement prompt sanitization and moderation if public.
   * Add AI usage limits and usage logging per user.
   * Allow admins to monitor activity and performance.

7. **Good UI/UX**
   Don’t ship ugly. Use a modern frontend stack (e.g., Tailwind + Next.js or Inertia.js + Vue). Focus on mobile-responsiveness and accessibility.

8. **Be Awesome**
   Innovate. Think beyond ChatGPT clones. Add features like:

   * Chat memory
   * AI personalities
   * Voice input/output
   * PDF/code/chat file uploads


Install packages using pnpm.
